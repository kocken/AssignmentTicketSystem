### YamlMime:ManagedReference
items:
- uid: TicketSystem.DatabaseRepository.ITicketDatabase
  commentId: T:TicketSystem.DatabaseRepository.ITicketDatabase
  id: ITicketDatabase
  parent: TicketSystem.DatabaseRepository
  children:
  - TicketSystem.DatabaseRepository.ITicketDatabase.EventAdd(TicketSystem.DatabaseRepository.Model.TicketEvent)
  - TicketSystem.DatabaseRepository.ITicketDatabase.EventDelete(System.Int32)
  - TicketSystem.DatabaseRepository.ITicketDatabase.EventsGet
  - TicketSystem.DatabaseRepository.ITicketDatabase.VenueAdd(TicketSystem.DatabaseRepository.Model.Venue)
  - TicketSystem.DatabaseRepository.ITicketDatabase.VenueDelete(System.Int32)
  - TicketSystem.DatabaseRepository.ITicketDatabase.VenuesFind(System.String)
  - TicketSystem.DatabaseRepository.ITicketDatabase.VenuesGet
  langs:
  - csharp
  - vb
  name: ITicketDatabase
  nameWithType: ITicketDatabase
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase
  type: Interface
  source:
    id: ITicketDatabase
    path: C:\Users\Plox\source\repos\AssignmentTicketSystem\src\DatabaseRepository\ITicketDatabase.cs
    startLine: 5
  assemblies:
  - DatabaseRepository
  namespace: TicketSystem.DatabaseRepository
  syntax:
    content: public interface ITicketDatabase
    content.vb: Public Interface ITicketDatabase
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: TicketSystem.DatabaseRepository.ITicketDatabase.EventAdd(TicketSystem.DatabaseRepository.Model.TicketEvent)
  commentId: M:TicketSystem.DatabaseRepository.ITicketDatabase.EventAdd(TicketSystem.DatabaseRepository.Model.TicketEvent)
  id: EventAdd(TicketSystem.DatabaseRepository.Model.TicketEvent)
  parent: TicketSystem.DatabaseRepository.ITicketDatabase
  langs:
  - csharp
  - vb
  name: EventAdd(TicketEvent)
  nameWithType: ITicketDatabase.EventAdd(TicketEvent)
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase.EventAdd(TicketSystem.DatabaseRepository.Model.TicketEvent)
  type: Method
  source:
    id: EventAdd
    path: C:\Users\Plox\source\repos\AssignmentTicketSystem\src\DatabaseRepository\ITicketDatabase.cs
    startLine: 12
  assemblies:
  - DatabaseRepository
  namespace: TicketSystem.DatabaseRepository
  summary: "\nAdds a new event to the database\n"
  example: []
  syntax:
    content: TicketEvent EventAdd(TicketEvent ticketEvent)
    parameters:
    - id: ticketEvent
      type: TicketSystem.DatabaseRepository.Model.TicketEvent
      description: Object to add, containing name and description
    return:
      type: TicketSystem.DatabaseRepository.Model.TicketEvent
      description: An object representing the newly created TicketEvent
    content.vb: Function EventAdd(ticketEvent As TicketEvent) As TicketEvent
  overload: TicketSystem.DatabaseRepository.ITicketDatabase.EventAdd*
- uid: TicketSystem.DatabaseRepository.ITicketDatabase.EventDelete(System.Int32)
  commentId: M:TicketSystem.DatabaseRepository.ITicketDatabase.EventDelete(System.Int32)
  id: EventDelete(System.Int32)
  parent: TicketSystem.DatabaseRepository.ITicketDatabase
  langs:
  - csharp
  - vb
  name: EventDelete(Int32)
  nameWithType: ITicketDatabase.EventDelete(Int32)
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase.EventDelete(System.Int32)
  type: Method
  source:
    id: EventDelete
    path: C:\Users\Plox\source\repos\AssignmentTicketSystem\src\DatabaseRepository\ITicketDatabase.cs
    startLine: 18
  assemblies:
  - DatabaseRepository
  namespace: TicketSystem.DatabaseRepository
  summary: "\nDeletes an event from the database\n"
  example: []
  syntax:
    content: void EventDelete(int id)
    parameters:
    - id: id
      type: System.Int32
      description: Id of the event to delete
    content.vb: Sub EventDelete(id As Integer)
  overload: TicketSystem.DatabaseRepository.ITicketDatabase.EventDelete*
- uid: TicketSystem.DatabaseRepository.ITicketDatabase.EventsGet
  commentId: M:TicketSystem.DatabaseRepository.ITicketDatabase.EventsGet
  id: EventsGet
  parent: TicketSystem.DatabaseRepository.ITicketDatabase
  langs:
  - csharp
  - vb
  name: EventsGet()
  nameWithType: ITicketDatabase.EventsGet()
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase.EventsGet()
  type: Method
  source:
    id: EventsGet
    path: C:\Users\Plox\source\repos\AssignmentTicketSystem\src\DatabaseRepository\ITicketDatabase.cs
    startLine: 24
  assemblies:
  - DatabaseRepository
  namespace: TicketSystem.DatabaseRepository
  summary: "\nGets all events from the database\n"
  example: []
  syntax:
    content: List<TicketEvent> EventsGet()
    return:
      type: System.Collections.Generic.List{TicketSystem.DatabaseRepository.Model.TicketEvent}
      description: A list of all events
    content.vb: Function EventsGet As List(Of TicketEvent)
  overload: TicketSystem.DatabaseRepository.ITicketDatabase.EventsGet*
- uid: TicketSystem.DatabaseRepository.ITicketDatabase.VenueAdd(TicketSystem.DatabaseRepository.Model.Venue)
  commentId: M:TicketSystem.DatabaseRepository.ITicketDatabase.VenueAdd(TicketSystem.DatabaseRepository.Model.Venue)
  id: VenueAdd(TicketSystem.DatabaseRepository.Model.Venue)
  parent: TicketSystem.DatabaseRepository.ITicketDatabase
  langs:
  - csharp
  - vb
  name: VenueAdd(Venue)
  nameWithType: ITicketDatabase.VenueAdd(Venue)
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase.VenueAdd(TicketSystem.DatabaseRepository.Model.Venue)
  type: Method
  source:
    id: VenueAdd
    path: C:\Users\Plox\source\repos\AssignmentTicketSystem\src\DatabaseRepository\ITicketDatabase.cs
    startLine: 31
  assemblies:
  - DatabaseRepository
  namespace: TicketSystem.DatabaseRepository
  syntax:
    content: Venue VenueAdd(Venue venue)
    parameters:
    - id: venue
      type: TicketSystem.DatabaseRepository.Model.Venue
    return:
      type: TicketSystem.DatabaseRepository.Model.Venue
    content.vb: Function VenueAdd(venue As Venue) As Venue
  overload: TicketSystem.DatabaseRepository.ITicketDatabase.VenueAdd*
- uid: TicketSystem.DatabaseRepository.ITicketDatabase.VenueDelete(System.Int32)
  commentId: M:TicketSystem.DatabaseRepository.ITicketDatabase.VenueDelete(System.Int32)
  id: VenueDelete(System.Int32)
  parent: TicketSystem.DatabaseRepository.ITicketDatabase
  langs:
  - csharp
  - vb
  name: VenueDelete(Int32)
  nameWithType: ITicketDatabase.VenueDelete(Int32)
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase.VenueDelete(System.Int32)
  type: Method
  source:
    id: VenueDelete
    path: C:\Users\Plox\source\repos\AssignmentTicketSystem\src\DatabaseRepository\ITicketDatabase.cs
    startLine: 37
  assemblies:
  - DatabaseRepository
  namespace: TicketSystem.DatabaseRepository
  summary: "\nDeletes a venue from the database\n"
  example: []
  syntax:
    content: void VenueDelete(int id)
    parameters:
    - id: id
      type: System.Int32
      description: Id of the venue to delete
    content.vb: Sub VenueDelete(id As Integer)
  overload: TicketSystem.DatabaseRepository.ITicketDatabase.VenueDelete*
- uid: TicketSystem.DatabaseRepository.ITicketDatabase.VenuesFind(System.String)
  commentId: M:TicketSystem.DatabaseRepository.ITicketDatabase.VenuesFind(System.String)
  id: VenuesFind(System.String)
  parent: TicketSystem.DatabaseRepository.ITicketDatabase
  langs:
  - csharp
  - vb
  name: VenuesFind(String)
  nameWithType: ITicketDatabase.VenuesFind(String)
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase.VenuesFind(System.String)
  type: Method
  source:
    id: VenuesFind
    path: C:\Users\Plox\source\repos\AssignmentTicketSystem\src\DatabaseRepository\ITicketDatabase.cs
    startLine: 44
  assemblies:
  - DatabaseRepository
  namespace: TicketSystem.DatabaseRepository
  summary: "\nFind all venues matching the query\n"
  example: []
  syntax:
    content: List<Venue> VenuesFind(string query)
    parameters:
    - id: query
      type: System.String
      description: A text which the user is looking for in the venues
    return:
      type: System.Collections.Generic.List{TicketSystem.DatabaseRepository.Model.Venue}
      description: A list of venues matching the query
    content.vb: Function VenuesFind(query As String) As List(Of Venue)
  overload: TicketSystem.DatabaseRepository.ITicketDatabase.VenuesFind*
- uid: TicketSystem.DatabaseRepository.ITicketDatabase.VenuesGet
  commentId: M:TicketSystem.DatabaseRepository.ITicketDatabase.VenuesGet
  id: VenuesGet
  parent: TicketSystem.DatabaseRepository.ITicketDatabase
  langs:
  - csharp
  - vb
  name: VenuesGet()
  nameWithType: ITicketDatabase.VenuesGet()
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase.VenuesGet()
  type: Method
  source:
    id: VenuesGet
    path: C:\Users\Plox\source\repos\AssignmentTicketSystem\src\DatabaseRepository\ITicketDatabase.cs
    startLine: 50
  assemblies:
  - DatabaseRepository
  namespace: TicketSystem.DatabaseRepository
  summary: "\nGets all venues from the database\n"
  example: []
  syntax:
    content: List<Venue> VenuesGet()
    return:
      type: System.Collections.Generic.List{TicketSystem.DatabaseRepository.Model.Venue}
      description: A list of all venues
    content.vb: Function VenuesGet As List(Of Venue)
  overload: TicketSystem.DatabaseRepository.ITicketDatabase.VenuesGet*
references:
- uid: TicketSystem.DatabaseRepository
  commentId: N:TicketSystem.DatabaseRepository
  isExternal: false
  name: TicketSystem.DatabaseRepository
  nameWithType: TicketSystem.DatabaseRepository
  fullName: TicketSystem.DatabaseRepository
- uid: TicketSystem.DatabaseRepository.ITicketDatabase.EventAdd*
  commentId: Overload:TicketSystem.DatabaseRepository.ITicketDatabase.EventAdd
  isExternal: false
  name: EventAdd
  nameWithType: ITicketDatabase.EventAdd
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase.EventAdd
- uid: TicketSystem.DatabaseRepository.Model.TicketEvent
  commentId: T:TicketSystem.DatabaseRepository.Model.TicketEvent
  parent: TicketSystem.DatabaseRepository.Model
  isExternal: false
  name: TicketEvent
  nameWithType: TicketEvent
  fullName: TicketSystem.DatabaseRepository.Model.TicketEvent
- uid: TicketSystem.DatabaseRepository.Model
  commentId: N:TicketSystem.DatabaseRepository.Model
  isExternal: false
  name: TicketSystem.DatabaseRepository.Model
  nameWithType: TicketSystem.DatabaseRepository.Model
  fullName: TicketSystem.DatabaseRepository.Model
- uid: TicketSystem.DatabaseRepository.ITicketDatabase.EventDelete*
  commentId: Overload:TicketSystem.DatabaseRepository.ITicketDatabase.EventDelete
  isExternal: false
  name: EventDelete
  nameWithType: ITicketDatabase.EventDelete
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase.EventDelete
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: TicketSystem.DatabaseRepository.ITicketDatabase.EventsGet*
  commentId: Overload:TicketSystem.DatabaseRepository.ITicketDatabase.EventsGet
  isExternal: false
  name: EventsGet
  nameWithType: ITicketDatabase.EventsGet
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase.EventsGet
- uid: System.Collections.Generic.List{TicketSystem.DatabaseRepository.Model.TicketEvent}
  commentId: T:System.Collections.Generic.List{TicketSystem.DatabaseRepository.Model.TicketEvent}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TicketEvent>
  nameWithType: List<TicketEvent>
  fullName: System.Collections.Generic.List<TicketSystem.DatabaseRepository.Model.TicketEvent>
  nameWithType.vb: List(Of TicketEvent)
  fullName.vb: System.Collections.Generic.List(Of TicketSystem.DatabaseRepository.Model.TicketEvent)
  name.vb: List(Of TicketEvent)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TicketSystem.DatabaseRepository.Model.TicketEvent
    name: TicketEvent
    nameWithType: TicketEvent
    fullName: TicketSystem.DatabaseRepository.Model.TicketEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TicketSystem.DatabaseRepository.Model.TicketEvent
    name: TicketEvent
    nameWithType: TicketEvent
    fullName: TicketSystem.DatabaseRepository.Model.TicketEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TicketSystem.DatabaseRepository.ITicketDatabase.VenueAdd*
  commentId: Overload:TicketSystem.DatabaseRepository.ITicketDatabase.VenueAdd
  isExternal: false
  name: VenueAdd
  nameWithType: ITicketDatabase.VenueAdd
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase.VenueAdd
- uid: TicketSystem.DatabaseRepository.Model.Venue
  commentId: T:TicketSystem.DatabaseRepository.Model.Venue
  parent: TicketSystem.DatabaseRepository.Model
  isExternal: false
  name: Venue
  nameWithType: Venue
  fullName: TicketSystem.DatabaseRepository.Model.Venue
- uid: TicketSystem.DatabaseRepository.ITicketDatabase.VenueDelete*
  commentId: Overload:TicketSystem.DatabaseRepository.ITicketDatabase.VenueDelete
  isExternal: false
  name: VenueDelete
  nameWithType: ITicketDatabase.VenueDelete
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase.VenueDelete
- uid: TicketSystem.DatabaseRepository.ITicketDatabase.VenuesFind*
  commentId: Overload:TicketSystem.DatabaseRepository.ITicketDatabase.VenuesFind
  isExternal: false
  name: VenuesFind
  nameWithType: ITicketDatabase.VenuesFind
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase.VenuesFind
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.List{TicketSystem.DatabaseRepository.Model.Venue}
  commentId: T:System.Collections.Generic.List{TicketSystem.DatabaseRepository.Model.Venue}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Venue>
  nameWithType: List<Venue>
  fullName: System.Collections.Generic.List<TicketSystem.DatabaseRepository.Model.Venue>
  nameWithType.vb: List(Of Venue)
  fullName.vb: System.Collections.Generic.List(Of TicketSystem.DatabaseRepository.Model.Venue)
  name.vb: List(Of Venue)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TicketSystem.DatabaseRepository.Model.Venue
    name: Venue
    nameWithType: Venue
    fullName: TicketSystem.DatabaseRepository.Model.Venue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TicketSystem.DatabaseRepository.Model.Venue
    name: Venue
    nameWithType: Venue
    fullName: TicketSystem.DatabaseRepository.Model.Venue
  - name: )
    nameWithType: )
    fullName: )
- uid: TicketSystem.DatabaseRepository.ITicketDatabase.VenuesGet*
  commentId: Overload:TicketSystem.DatabaseRepository.ITicketDatabase.VenuesGet
  isExternal: false
  name: VenuesGet
  nameWithType: ITicketDatabase.VenuesGet
  fullName: TicketSystem.DatabaseRepository.ITicketDatabase.VenuesGet
